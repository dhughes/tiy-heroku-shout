<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1465234918401">{:repl-history {:ide [], :local [&quot;(+ 1 1)&quot; &quot;(sql/create-table-ddl :testing [[:data :text]])&quot; &quot;sql&quot; &quot;(sql/)&quot; &quot;(require '[clojure.java.jdbc :as sql])&quot; &quot;(sql/create-table-ddl :testing [[:data :text] [:whatever :varchar]])&quot; &quot;(sql/db-do-commands \&quot;jdbc:postgresql://localhost:5432/shouter\&quot; (sql/create-table-ddl :testing [[:data :text] [:whatever :varchar]]))&quot; &quot;(sql/insert! \&quot;jdbc:postgresql://localhost:5432/shouter\&quot; :test [:data \&quot;Some data\&quot; :whatever \&quot;Whatevs\&quot;])&quot; &quot;(sql/insert! \&quot;jdbc:postgresql://localhost:5432/shouter\&quot; :test {:data \&quot;Some data\&quot; :whatever \&quot;Whatevs\&quot;})&quot; &quot;(sql/insert! \&quot;jdbc:postgresql://localhost:5432/shouter\&quot; :testing {:data \&quot;Some data\&quot; :whatever \&quot;Whatevs\&quot;})&quot; &quot;(sql/insert! \&quot;postgresql://localhost:5432/shouter\&quot;\n                :testing\n                {:data \&quot;Some data 2\&quot; :whatever \&quot;Whatevs 3\&quot;})&quot; &quot;(def jdbcurl \&quot;postgresql://localhost:5432/shouter\&quot;)&quot; &quot;(sql/query jdbcurl [\&quot;select * from testing\&quot;])&quot; &quot;(sql/query jdbcurl [\&quot;select * from testing\&quot;] [\&quot;select data from testing\&quot;])&quot; &quot;(sql/query jdbcurl [\&quot;select * from testing\&quot; \&quot;select data from testing\&quot;])&quot; &quot;(sql/query jdbcurl [\&quot;DROP TABLE testing\&quot;])&quot; &quot;(sql/db-do-commands jdbcurl [\&quot;DROP TABLE testing\&quot;])&quot; &quot;(shouter.views.layout/common \&quot;Doug was here\&quot; \&quot;any\&quot; \&quot;number\&quot; \&quot;of\&quot; \&quot;tings\&quot;)&quot; &quot;(clojure.repl/doc list)&quot; &quot;(clojure.repl/doc vector)&quot; &quot;(h/html5 [:p \&quot;Hi there!\&quot;])&quot; &quot;(hiccup/html [:p \&quot;sfdsdfafdssdfa\&quot;])&quot; &quot;(hiccup.page/html5 [:body [:p \&quot;Hello World!\&quot;]])&quot; &quot;(hiccup.page/html5 [:body [:p \&quot;Hello World!\&quot;] [:br]])&quot; &quot;(hiccup.page/html5 [:body [:a {:href \&quot;fsdafdsafdsa\&quot;} \&quot;Hello World!\&quot; ] [:a {:href \&quot;sfdfsdfsdafsda\&quot;} \&quot;stuff\&quot;]])&quot; &quot;(hiccup.page/html5 [:body \n                    [:a {:href \&quot;fsdafdsafdsa\&quot;} \&quot;Hello World!\&quot;] \n                    \&quot; \&quot;\n                    [:a {:href \&quot;sfdfsdfsdafsda\&quot;} \&quot;stuff\&quot;]])&quot; &quot;(hiccup.page/html5 [:body \n                    [:a {:href \&quot;fsdafdsafdsa\&quot;} \&quot;Hello World!\&quot;] \n                    [:span \&quot; \&quot;]\n                    [:a {:href \&quot;sfdfsdfsdafsda\&quot;} \&quot;stuff\&quot;]])&quot; &quot;(hiccup.page/html5 [:body \n                    [:a {:href \&quot;fsdafdsafdsa\&quot;} \&quot;Hello World!\&quot;] \n                    \&quot; any other text \&quot;\n                    [:a {:href \&quot;sfdfsdfsdafsda\&quot;} \&quot;stuff\&quot;]])&quot; &quot;(common \&quot;Doug is here\&quot; [:em \&quot;Got no coffee on me!!\&quot;])&quot; &quot;(four-oh-four)&quot; &quot;(require '[hiccup.form :as form])&quot; &quot;(form/form-to)&quot; &quot;(h/html5 (shout-form))&quot; &quot;(shout-form)&quot; &quot;(hiccup.core/html (shout-form))&quot; &quot;(h :div)&quot; &quot;(h (:body {:text \&quot;foo\&quot;}))&quot; &quot;(h (:body {:body \&quot;foo\&quot;}))&quot; &quot;(def shout {:body \&quot;foo\&quot;})&quot; &quot;(:body shout)&quot; &quot;(shout :body)&quot; &quot;(h \&quot;sdfasfdasfda\&quot;)&quot; &quot;(h (shout :body))&quot; &quot;(h \&quot;&lt;a&gt;foo&lt;/a&gt;\&quot;)&quot; &quot;(escape-html \&quot;&lt;a&gt;foo&lt;/a&gt;\&quot;)&quot; &quot;(dispay-shouts [{:body \&quot;foo\&quot;} {:body \&quot;bar\&quot;}])&quot; &quot;(shouter.views.layout/display-shouts [{:body \&quot;foo\&quot;} {:body \&quot;bar\&quot;}])&quot; &quot;(shouter.views.shouts/display-shouts [{:body \&quot;foo\&quot;} {:body \&quot;bar\&quot;}])&quot; &quot;[:div {:class \&quot;shouts sixteen columns alpha omega\&quot;}\n (map (fn [shout]\n        [:h2 {:class \&quot;shout\&quot;} (h (:body shout))]) shouts)]&quot; &quot;(display-shouts [{:body \&quot;foo\&quot;} {:body \&quot;bar\&quot;}])&quot; &quot;(index [{:body \&quot;foo\&quot;} {:body \&quot;bar\&quot;}])&quot; &quot;(def spec (or (System/getenv \&quot;DATABASE_URL\&quot;)\n              \&quot;postgresql://localhost:5432/shouter\&quot;))\n\n&quot; &quot;spec&quot; &quot;(create {:body \&quot;I get an error because the table doesn't exist\&quot;})&quot; &quot;(first ({:count 0}))&quot; &quot;(first :count ({:count 0}))&quot; &quot;(first '({:count 0}))&quot; &quot;(:count {:count 0})&quot; &quot;(pos? 1)&quot; &quot;(pos? -1)&quot; &quot;(pos? 0)&quot; &quot;(sql/query shout/spec\n           [(str \&quot;select count(*) from information_schema.tables \&quot;\n                 \&quot;where table_name='shouts'\&quot;)])&quot; &quot;(sql/create-table-ddl\n  :shouts\n  [[:id :serial \&quot;PRIMARY KEY\&quot;]\n   [:body :varchar \&quot;NOT NULL\&quot;]\n   [:created_at :timestamp\n    \&quot;NOT NULL\&quot; \&quot;DEFAULT CURRENT_TIMESTAMP\&quot;]])&quot; &quot;(all)&quot; &quot;(migrated?)&quot; &quot;(create)&quot; &quot;(create {:body \&quot;hi\&quot;})&quot; &quot;(create {:body \&quot;hi scott\&quot;})&quot; &quot;(create \&quot;DAn makes a good point\&quot;)&quot; &quot;(create {:body \&quot;DAn makes a good point\&quot;})&quot; &quot;(shouter.models.migration/migrate)&quot; &quot;(index)&quot; &quot;(routes)&quot; &quot;routes&quot; &quot;application&quot; &quot;(-main)&quot; &quot;(migrate)&quot; &quot;(migrate)\n  &quot;], :remote []}}</component>
</project>